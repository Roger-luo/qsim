import numpy as np
import matplotlib.pyplot as plt
import itertools

import numpy as np
import scipy.integrate
import scipy.optimize
from odeintw import odeintw

import scipy.sparse as sparse
from scipy.linalg import expm
from scipy.sparse.linalg import expm_multiply

from qsim.codes import qubit
from qsim.codes.quantum_state import State
from qsim.evolution import lindblad_operators, hamiltonian
from qsim.graph_algorithms.graph import Graph
from qsim.graph_algorithms.graph import line_graph, degree_fails_graph
from qsim.lindblad_master_equation import LindbladMasterEquation
from qsim.schrodinger_equation import SchrodingerEquation
from qsim.tools import tools

"""
Plan:
We want to minimize k_alpha * k_beta, which are functions of four time-dependent functions: delta_e, delta_r, omega_g,
and omega_r. We want to find out what functional forms of these variables minimize this quantity. To do this, we need

1. a function which takes in the schedules for each variable, and spits out k_alpha and k_beta
2. a function which minimizes the above function (scipy.minimize)
3. a function that "suggests" schedules to minimize over

3. Basically we want to give a basis, and define constraints on the outputs. To define constraints on the outputs, 
we must define constraints on the inputs, i.e. the coefficients we put into the polynomial.

Chebyshev polynomials with cosine input: 
- enforce constraint by generating inputs between -1 and 1, then normalizing by the sum of absolute values
- this can be done with a nonlinear constraint
"""


class EffectiveOperatorHamiltonian(object):
    def __init__(self, omega_g, omega_r, energies=(1,), graph: Graph = None, IS_subspace=True, code=qubit):
        # Just need to define self.hamiltonian
        assert IS_subspace
        self.energies = energies
        self.IS_subspace = IS_subspace
        self.graph = graph
        self.omega_r = omega_r
        self.omega_g = omega_g
        self.code = code
        assert self.code is qubit

        if self.IS_subspace:
            # Generate sparse mixing Hamiltonian
            assert graph is not None
            assert isinstance(graph, Graph)
            # We have already solved for this information
            IS, nary_to_index, num_IS = graph.independent_sets, graph.binary_to_index, graph.num_independent_sets
            self.transition = (0, 1)
            self._hamiltonian_rr = np.zeros((num_IS, num_IS))
            self._hamiltonian_gg = np.zeros((num_IS, num_IS))
            self._hamiltonian_cross_terms = np.zeros((num_IS, num_IS))
            for k in IS:
                self._hamiltonian_rr[k, k] = np.sum(IS[k][2] == self.transition[0])
                self._hamiltonian_gg[k, k] = np.sum(IS[k][2] == self.transition[1])
            self._csc_hamiltonian_rr = sparse.csc_matrix(self._hamiltonian_rr)
            self._csc_hamiltonian_gg = sparse.csc_matrix(self._hamiltonian_gg)
            # For each IS, look at spin flips generated by the laser
            # Over-allocate space
            rows = np.zeros(graph.n * num_IS, dtype=int)
            columns = np.zeros(graph.n * num_IS, dtype=int)
            entries = np.zeros(graph.n * num_IS, dtype=float)
            num_terms = 0
            for i in IS:
                for j in range(len(IS[i][2])):
                    if IS[i][2][j] == self.transition[1]:
                        # Flip spin at this location
                        # Get binary representation
                        temp = IS[i][2].copy()
                        temp[j] = self.transition[0]
                        flipped_temp = tools.nary_to_int(temp, base=code.d)
                        if flipped_temp in nary_to_index:
                            # This is a valid spin flip
                            rows[num_terms] = nary_to_index[flipped_temp]
                            columns[num_terms] = i
                            entries[num_terms] = 1
                            num_terms += 1
            # Cut off the excess in the arrays
            columns = columns[:2 * num_terms]
            rows = rows[:2 * num_terms]
            entries = entries[:2 * num_terms]
            # Populate the second half of the entries according to self.pauli
            columns[num_terms:2 * num_terms] = rows[:num_terms]
            rows[num_terms:2 * num_terms] = columns[:num_terms]
            entries[num_terms:2 * num_terms] = entries[:num_terms]
            # Now, construct the Hamiltonian
            self._csc_hamiltonian_cross_terms = sparse.csc_matrix((entries, (rows, columns)), shape=(num_IS, num_IS))
            try:
                self._hamiltonian_cross_terms = self._csc_hamiltonian_cross_terms.toarray()
            except MemoryError:
                self._hamiltonian_cross_terms = self._csc_hamiltonian_cross_terms

        else:
            # We are not in the IS subspace
            pass

    @property
    def hamiltonian(self):
        return self.energies[0] * (self.omega_g * self.omega_r * self._hamiltonian_cross_terms +
                                   self.omega_g ** 2 * self._csc_hamiltonian_gg +
                                   self.omega_r ** 2 * self._csc_hamiltonian_rr)

    def left_multiply(self, state: State):
        return self.hamiltonian @ state

    def right_multiply(self, state: State):
        return state @ self.hamiltonian

    def evolve(self, state: State, time):
        if state.is_ket:
            return State(expm_multiply(-1j * time * self.hamiltonian, state),
                         is_ket=state.is_ket, IS_subspace=state.IS_subspace, code=state.code, graph=self.graph)

        else:
            exp_hamiltonian = expm(-1j * time * self.hamiltonian)
            return State(exp_hamiltonian @ state @ exp_hamiltonian.conj().T,
                         is_ket=state.is_ket, IS_subspace=state.IS_subspace, code=state.code, graph=self.graph)


class EffectiveOperatorDissipation(lindblad_operators.LindbladJumpOperator):
    def __init__(self, omega_g, omega_r, rates=(1,), graph: Graph = None, IS_subspace=True, code=qubit):
        self.omega_g = omega_g
        self.omega_r = omega_r

        self.IS_subspace = IS_subspace
        self.transition = (0, 1)
        self.graph = graph
        # Construct jump operators
        if self.IS_subspace:
            # Generate sparse mixing Hamiltonian
            assert graph is not None
            assert isinstance(graph, Graph)
            if code is not qubit:
                IS, nary_to_index, num_IS = graph.independent_sets_code(self.code)
            else:
                # We have already solved for this information
                IS, nary_to_index, num_IS = graph.independent_sets, graph.binary_to_index, graph.num_independent_sets
            self._jump_operators_rg = []
            self._jump_operators_gg = []
            # For each atom, consider the states spontaneous emission can generate transitions between
            # Over-allocate space
            for j in range(graph.n):
                rows_rg = np.zeros(num_IS, dtype=int)
                columns_rg = np.zeros(num_IS, dtype=int)
                entries_rg = np.zeros(num_IS, dtype=int)
                rows_gg = np.zeros(num_IS, dtype=int)
                columns_gg = np.zeros(num_IS, dtype=int)
                entries_gg = np.zeros(num_IS, dtype=int)
                num_terms_gg = 0
                num_terms_rg = 0
                for i in IS:
                    if IS[i][2][j] == self.transition[0]:
                        # Flip spin at this location
                        # Get binary representation
                        temp = IS[i][2].copy()
                        temp[j] = self.transition[1]
                        flipped_temp = tools.nary_to_int(temp, base=code.d)
                        if flipped_temp in nary_to_index:
                            # This is a valid spin flip
                            rows_rg[num_terms_rg] = nary_to_index[flipped_temp]
                            columns_rg[num_terms_rg] = i
                            entries_rg[num_terms_rg] = 1
                            num_terms_rg += 1
                    elif IS[i][2][j] == self.transition[1]:
                        rows_gg[num_terms_gg] = i
                        columns_gg[num_terms_gg] = i
                        entries_gg[num_terms_gg] = 1
                        num_terms_gg += 1

                # Cut off the excess in the arrays
                columns_rg = columns_rg[:num_terms_rg]
                rows_rg = rows_rg[:num_terms_rg]
                entries_rg = entries_rg[:num_terms_rg]
                columns_gg = columns_gg[:num_terms_gg]
                rows_gg = rows_gg[:num_terms_gg]
                entries_gg = entries_gg[:num_terms_gg]
                # Now, append the jump operator
                jump_operator_rg = sparse.csc_matrix((entries_rg, (rows_rg, columns_rg)), shape=(num_IS, num_IS))
                jump_operator_gg = sparse.csc_matrix((entries_gg, (rows_gg, columns_gg)), shape=(num_IS, num_IS))

                self._jump_operators_rg.append(jump_operator_rg)
                self._jump_operators_gg.append(jump_operator_gg)
            self._jump_operators_rg = np.asarray(self._jump_operators_rg)
            self._jump_operators_gg = np.asarray(self._jump_operators_gg)
        else:
            # self._jump_operators_rg = []
            # self._jump_operators_gg = []
            op_rg = np.array([[[0, 0], [1, 0]]])
            op_gg = np.array([[[0, 0], [0, 1]]])
            self._jump_operators_rg = op_rg
            self._jump_operators_gg = op_gg

        super().__init__(None, rates=rates, graph=graph, IS_subspace=IS_subspace, code=code)

    @property
    def jump_operators(self):
        return np.sqrt(self.rates[0]) * (self.omega_g * self._jump_operators_gg +
                                         self.omega_r * self._jump_operators_rg)

    @property
    def liouville_evolution_operator(self):
        if self._evolution_operator is None and self.IS_subspace:
            num_IS = self.graph.num_independent_sets
            self._evolution_operator = sparse.csr_matrix((num_IS ** 2, num_IS ** 2))
            for jump_operator in self.jump_operators:
                # Jump operator is real, so we don't need to conjugate
                self._evolution_operator = self._evolution_operator + sparse.kron(jump_operator,
                                                                                  jump_operator) - 1 / 2 * \
                                           sparse.kron(jump_operator.T @ jump_operator, sparse.identity(num_IS)) - \
                                           1 / 2 * sparse.kron(sparse.identity(num_IS), jump_operator.T @ jump_operator)

        elif self._evolution_operator is None:
            # TODO: generate the evolution operator for non-IS subspace states
            raise NotImplementedError
        return self.rates[0] * self._evolution_operator


def find_optimal_schedules(verbose=False):
    graph = line_graph(n=3)
    omega = 1
    gamma = 1
    delta_e = 10
    laser = EffectiveOperatorHamiltonian(graph=graph, IS_subspace=True)
    energy_shift = hamiltonian.HamiltonianEnergyShift(IS_subspace=True, graph=graph, index=0)
    dissipation = EffectiveOperatorDissipation(graph=graph)

    def schedule_from_coefficients(t, coefficients, boundaries):
        """
        Takes in a list of four lists of coefficients. Generates four Chebyshev polynomial objects.
        """
        assert len(coefficients) == 4
        # Variable change time to x
        x = 2 * (t - 1 / 2)
        delta_r_t = omega ** 2 / delta_e * np.polynomial.chebyshev.chebval(x, coefficients[
                                                                              boundaries[0][0]:boundaries[0][1]]) * 5
        delta_e_t = np.polynomial.chebyshev.chebval(x, coefficients[boundaries[1][0]:boundaries[1][1]])
        omega_g_t = omega * (
                    np.polynomial.chebyshev.chebval(x, coefficients[boundaries[2][0]:boundaries[2][1]] * 5) + 1) / 2
        omega_r_t = omega * (
                    np.polynomial.chebyshev.chebval(x, coefficients[boundaries[3][0]:boundaries[3][1]] * 5) + 1) / 2
        energy_shift.energies = (delta_r_t,)
        laser.energies = (omega_g_t * omega_r_t / delta_e_t,)
        dissipation.omega_g = omega_g_t
        dissipation.omega_r = omega_r_t
        dissipation.rates = (gamma / delta_e_t ** 2,)

    eq = LindbladMasterEquation(hamiltonians=[laser, energy_shift], jump_operators=[dissipation])

    def correction(coefficients):
        k_alpha = compute_k_alpha(eq, lambda t: schedule_from_coefficients(t, coefficients, boundaries),
                                  verbose=verbose)
        k_beta = compute_k_alpha(eq, lambda t: schedule_from_coefficients(t, coefficients, boundaries))
        if np.isclose(k_alpha, 0) or np.isclose(k_beta, 0):
            print('One of the corrections is near zero', k_alpha, k_beta)
        return k_alpha * k_beta

    def coefficient_regularization(coefficients):
        delta_r_coeff = coefficients[boundaries[0][0]:boundaries[0][1]]
        delta_e_coeff = coefficients[boundaries[1][0]:boundaries[1][1]]
        omega_g_coeff = coefficients[boundaries[2][0]:boundaries[2][1]]
        omega_r_coeff = coefficients[boundaries[3][0]:boundaries[3][1]]
        return np.array([np.sum(np.abs(delta_r_coeff)), np.sum(np.abs(delta_e_coeff)), np.sum(np.abs(omega_g_coeff)),
                         np.sum(np.abs(omega_r_coeff))])

    constraints = scipy.optimize.NonlinearConstraint(coefficient_regularization, lb=np.zeros(4), ub=np.ones(4), keep_feasible=True)


    boundaries = [(0, 3), (3, 6), (6, 9), (9, 12)]
    scipy.optimize.minimize(correction, np.ones(13))


def compute_k_alpha(eq: LindbladMasterEquation, schedule, verbose=False):
    """Use quad integrator, and only integrate the function at set times. Solve for the lowest eigenvalue only.
    """

    def evolve(t):
        # Generate a mapping from a time to an index
        if verbose:
            print(t)
        schedule(t, 1)
        ground_energy, ground_state = SchrodingerEquation(hamiltonians=eq.hamiltonians).ground_state()
        overlap = 0
        for op in eq.jump_operators[0].jump_operators:
            overlap = overlap + (np.abs(ground_state.conj().T @ op @ ground_state) ** 2)[0, 0] - \
                      (ground_state.conj().T @ op.conj().T @ op @ ground_state)[0, 0]
        return overlap.real

    return scipy.integrate.quad(evolve, 0, 1, epsrel=1e-7, epsabs=1e-7)[0]


def compute_k_beta(eq: LindbladMasterEquation, schedule):
    dt = .001

    # Compute matrix element at the very beginning and end
    schedule(1 - dt, 1)
    eigvals, eigvecs = SchrodingerEquation(hamiltonians=eq.hamiltonians).eig()
    schedule(1 - 2 * dt, 1)
    eigvals_past, eigvecs_past = SchrodingerEquation(hamiltonians=eq.hamiltonians).eig()

    def normalize_phase(eigvecs, eigvecs_past):
        # ensure that the first eigenvalue is positive
        if eigvecs[0][0] <= 0:
            eigvecs[0] = eigvecs[0] * -1

        if eigvecs_past[0][0] <= 0:
            eigvecs_past[0] = eigvecs_past[0] * -1

        if eigvecs[-1][0] <= 0:
            eigvecs[-1] = eigvecs[-1] * -1

        if eigvecs_past[-1][0] <= 0:
            eigvecs_past[-1] = eigvecs_past[-1] * -1
        return eigvecs, eigvecs_past

    eigvecs, eigvecs_past = normalize_phase(eigvecs, eigvecs_past)

    res_end = (np.vdot(eigvecs[-1], (eigvecs[0] - eigvecs_past[0]) / dt) / (eigvals[0] - eigvals[-1]))

    schedule(2 * dt, 1)
    eigvals, eigvecs = SchrodingerEquation(hamiltonians=eq.hamiltonians).eig()
    schedule(dt, 1)
    eigvals_past, eigvecs_past = SchrodingerEquation(hamiltonians=eq.hamiltonians).eig()
    eigvecs, eigvecs_past = normalize_phase(eigvecs, eigvecs_past)

    res_beginning = (np.vdot(eigvecs[-1], (eigvecs[0] - eigvecs_past[0]) / dt) / (eigvals[0] - eigvals[-1]))
    return res_end ** 2 + res_beginning ** 2
