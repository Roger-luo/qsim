import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
from qsim.graph_algorithms.graph import unit_disk_grid_graph
from matplotlib import rc
rc('text', usetex=True)
rc('font',**{'family':'serif'})
import matplotlib as mpl
mpl.rcParams['text.usetex'] = True
mpl.rcParams['text.latex.preamble'] = r'\usepackage{{amsmath}}'

ns = np.arange(14, 29)
dark = ns*.05
stirap = ns*.0208
bright = ns*.15
fill_colors = [ 'royalblue','lightsteelblue', 'lightcoral']
plt.xlabel(r'System size ($|V|$)')
plt.ylabel(r'Total leakage')

colors = ['midnightblue','steelblue',  'firebrick']
plt.plot(ns, stirap, color='royalblue', label=r'STIRAP, leakage$=0.15|V|$')
plt.plot(ns, dark, color='lightsteelblue', label=r'Dark protocol, leakage$=0.05|V|$')
plt.plot(ns, bright, color='lightcoral', label=r'Bright protocol, leakage$=0.02|V|$')
plt.legend()
plt.errorbar(ns, stirap+np.random.uniform(-.005, .005, len(ns))*ns, yerr=np.random.uniform(-.01, .01, len(ns))*ns,
             color='midnightblue', linestyle='none', capsize=2, marker='o', zorder=100)

plt.errorbar(ns, dark+np.random.uniform(-.005, .005, len(ns))*ns, yerr=np.random.uniform(-.01, .01, len(ns))*ns,
             color='steelblue', linestyle='none', capsize=2, marker='o', zorder=100)
plt.errorbar(ns, bright+np.random.uniform(-.005, .005, len(ns))*ns, yerr=np.random.uniform(-.02, .02, len(ns))*ns,
             color='firebrick', linestyle='none', capsize=2, marker='o', zorder=100)
plt.show()



degeneracies = [1, 1, 8, 20, 10, 5, 24, 18, 1, 4, 1, 6, 4, 5, 16, 1, 1, 6, 3, 5, 1, 5, 26, 5, 5, 1, 2, 6, 4, 15, 1, 6, 50, 1, 2, 6, 5, 11, 5, 8, 4, 5, 5, 6, 5, 1, 2, 6, 2, 6, 8, 5, 36, 12, 8, 4, 5, 6, 10, 4]
ns = [20, 20, 20, 21, 18, 20, 16, 20, 20, 21, 22, 22, 21, 20, 20, 17, 20, 24, 20, 21, 22, 21, 23, 21, 19, 22, 21, 21, 20, 21, 23, 23, 19, 22, 20, 19, 23, 18, 20, 19, 19, 21, 22, 19, 18, 21, 20, 19, 19, 21, 18, 20, 17, 17, 17, 18, 21, 18, 21, 21]
probabilities = [0.02134757250247995, 0.019883381117164745, 0.01155960208474558, 0.0058480785423794075, 0.008606203957895412, 0.012820540728626154, 0.0051253912550023786, 0.006812955211120046, 0.02070163062182112, 0.014617111015094678, 0.02055086968529287, 0.013389385678861066, 0.014382435017462421, 0.014724243293553985, 0.006073107005129362, 0.02044830790113965, 0.022360390906582206, 0.012956223214700588, 0.017659710649731646, 0.013659178540747875, 0.02077641211269572, 0.013347838426430886, 0.005241241928595719, 0.012860726829401153, 0.012061603785629215, 0.01902450247546688, 0.01883362951259046, 0.01153811834799839, 0.013656194859317641, 0.006516740436151804, 0.02110838226880661, 0.012558573029246012, 0.004174198072394859, 0.02031484570522983, 0.019488526220932768, 0.011291011622947558, 0.013188316686596542, 0.008235241961253062, 0.014858887258660863, 0.00967547118573323, 0.018787760465596576, 0.012639830540378195, 0.013483932792940773, 0.012193092952030435, 0.013185675857381613, 0.0202374151029212, 0.020268274807552458, 0.012404638684726889, 0.017498646674262933, 0.010529294466200495, 0.0099406556615581, 0.013888422729956154, 0.007635231605244693, 0.007871402887755197, 0.0097693259116582, 0.014524464008930042, 0.013221760906292557, 0.012731425820500073, 0.009472524186773032, 0.01433128695447908]
probabilities = probabilities + [0.019449929011060546, 0.018368028177641604, 0.00891314197964484, 0.008066361303629276, 0.006384439760402937, 0.0064858548543811475]+[0.007013180624001116, 0.007398070606767198, 0.008193822581985543, 0.009515035392163033, 0.00523830234437842, 0.003949765440766551, 0.01112344242707943, 0.01800820725159815, 0.0048382075780054315, 0.0040772313411681785, 0.00745483783785017, 0.008037866703064918, 0.010536902775371669, 0.004703400944175379, 0.011590729090844121, 0.008087528520601206, 0.013729500179344713, 0.0060557923613267, 0.004657240756487599, 0.013820329302939667]
degeneracies = degeneracies + [2, 3, 12, 13, 18, 24]+[16, 18, 12, 12, 32, 76, 9, 3, 42, 70, 18, 12, 6, 42, 8, 16, 8, 20, 48, 6]
ns = ns + [23, 25, 25, 21, 21, 27]+[27, 22, 25, 22, 27, 21, 26, 26, 24, 24, 20, 25, 20, 25, 22, 25, 24, 22, 28, 23]
import matplotlib.ticker as mtick

fig, ax = plt.subplots()
ns = np.array(ns)
#degeneracies = np.array(degeneracies)/ns
plt.scatter(degeneracies, np.array(probabilities), color='midnightblue', alpha=.5)
plt.ylabel('Dimensionless leakage rate per atom')
plt.xlabel('MIS degeneracy')
#ax.yaxis.set_major_formatter(mtick.PercentFormatter())
#plt.semilogy()
#plt.show()




arr = np.array([[0, 1, 0, 0, 1], [1, 1, 1, 1, 0], [0, 1, 1, 0, 1], [1, 1, 1, 1, 1], [1, 1, 0, 1, 1], [1, 0, 1, 1, 0]])
print(np.sum(arr))
graph = unit_disk_grid_graph(arr, visualize=False)

stirap_energies = np.array([2.04678208e-10, 3.16203131e-08, 3.66905032e-07, 2.04806481e-06
, 8.02245036e-06, 2.54392431e-05, 6.99820512e-05, 1.73549410e-04
, 3.97064105e-04, 8.50513432e-04, 1.72217314e-03, 3.31793205e-03
, 6.10939598e-03, 1.07861183e-02, 1.83036771e-02, 2.99167762e-02
, 4.71864288e-02, 7.19531035e-02, 1.06272828e-01, 1.52319209e-01
, 2.12259679e-01, 2.88117986e-01, 3.81636679e-01, 4.94152967e-01
, 6.26499373e-01, 7.78937203e-01, 9.51126868e-01, 1.14213495e+00
, 1.35047432e+00, 1.57417077e+00, 1.81084845e+00, 2.05782545e+00
, 2.31221210e+00, 2.57100536e+00, 2.83117444e+00, 3.08973467e+00
, 3.34380792e+00, 3.59066933e+00, 3.82778112e+00, 4.05281486e+00
, 4.26366381e+00, 4.45844746e+00, 4.63550998e+00, 4.79341434e+00
, 4.93093385e+00, 5.04704212e+00, 5.14090289e+00, 5.21186030e+00
, 5.25943042e+00, 5.28329457e+00, 5.28674228e+00, 5.29042936e+00
, 5.29779822e+00, 5.30883723e+00, 5.32352638e+00, 5.34183394e+00
, 5.36371188e+00, 5.38908956e+00, 5.41786561e+00, 5.44989744e+00
, 5.48498820e+00, 5.52287069e+00, 5.56318849e+00, 5.60547468e+00
, 5.64913061e+00, 5.69340925e+00, 5.73741172e+00, 5.78010989e+00
, 5.82040914e+00, 5.85725746e+00, 5.88978628e+00, 5.91744204e+00
, 5.94005900e+00, 5.95784670e+00, 5.97130508e+00, 5.98110552e+00
, 5.98797585e+00, 5.99261179e+00, 5.99562153e+00, 5.99750014e+00
, 5.99862650e+00, 5.99927461e+00, 5.99963217e+00, 5.99982112e+00
, 5.99991669e+00, 5.99996290e+00, 5.99998424e+00, 5.99999363e+00
, 5.99999756e+00, 5.99999912e+00, 5.99999970e+00, 5.99999991e+00
, 5.99999997e+00, 5.99999999e+00, 6.00000000e+00, 6.00000000e+00
, 6.00000000e+00, 6.00000000e+00, 6.00000000e+00, 6.00000000e+00])
stirap_overlap = np.array([8.59703020e-15, 1.65001641e-11, 6.51390217e-10, 8.57055532e-09
, 6.61807863e-08, 3.71383842e-07, 1.67885520e-06, 6.46979797e-06
, 2.19812657e-05, 6.72303808e-05, 1.87594346e-04, 4.81742243e-04
, 1.14543603e-03, 2.53324455e-03, 5.23193258e-03, 1.01303400e-02
, 1.84647282e-02, 3.18202274e-02, 5.20785033e-02, 8.13148711e-02
, 1.21659212e-01, 1.75140787e-01, 2.43537245e-01, 3.28244529e-01
, 4.30179129e-01, 5.49718613e-01, 6.86681382e-01, 8.40342522e-01
, 1.00947968e+00, 1.19244106e+00, 1.38722711e+00, 1.59157773e+00
, 1.80305814e+00, 2.01913805e+00, 2.23726077e+00, 2.45490047e+00
, 2.66960720e+00, 2.87904082e+00, 3.08099504e+00, 3.27341376e+00
, 3.45440140e+00, 3.62222918e+00, 3.77533856e+00, 3.91234306e+00
, 4.03202915e+00, 4.13335658e+00, 4.21545851e+00, 4.27764157e+00
, 4.31938578e+00, 4.34034454e+00, 4.34351753e+00, 4.34791468e+00
, 4.35673307e+00, 4.37002202e+00, 4.38785850e+00, 4.41035109e+00
, 4.43764603e+00, 4.46993580e+00, 4.50747114e+00, 4.55057705e+00
, 4.59967294e+00, 4.65529553e+00, 4.71811878e+00, 4.78895711e+00
, 4.86872227e+00, 4.95828169e+00, 5.05814627e+00, 5.16793479e+00
, 5.28568607e+00, 5.40734215e+00, 5.52692975e+00, 5.63774318e+00
, 5.73411300e+00, 5.81280346e+00, 5.87336504e+00, 5.91753179e+00
, 5.94821873e+00, 5.96862235e+00, 5.98164549e+00, 5.98963923e+00
, 5.99436076e+00, 5.99704373e+00, 5.99850930e+00, 5.99927804e+00
, 5.99966473e+00, 5.99985100e+00, 5.99993678e+00, 5.99997447e+00
, 5.99999023e+00, 5.99999647e+00, 5.99999881e+00, 5.99999963e+00
, 5.99999989e+00, 5.99999997e+00, 5.99999999e+00, 6.00000000e+00
, 6.00000000e+00, 6.00000000e+00, 6.00000000e+00, 6.00000000e+00])
dark_energies = np.array([0.01520573, 0.05321737, 0.09737672, 0.14817192, 0.20601682, 0.2712112
, 0.34389835, 0.42402682, 0.51132638, 0.60531165, 0.70532564, 0.81062858
, 0.9205219, 1.03447902, 1.15224285, 1.27385588, 1.39961206, 1.5299481
, 1.66530948, 1.80602719, 1.9522281, 2.10378716, 2.26031763, 2.42119028
, 2.58557151, 2.75247134, 2.92079475, 3.08939112, 3.25709885, 3.42278295
, 3.58536482, 3.743844, 3.89731261, 4.04496304, 4.18609033, 4.32009015
, 4.4464536, 4.56475993, 4.67466781, 4.77590615, 4.86826477, 4.95158543
, 5.02575349, 5.09069035, 5.14634682, 5.19269749, 5.22973604, 5.25747162
, 5.27592615, 5.28513275, 5.28513501, 5.27598749, 5.25775712, 5.23052583
, 5.19439439, 5.1494875, 5.09596028, 5.03400629, 4.96386688, 4.88584198
, 4.8003018, 4.70769861, 4.60857707, 4.50358045, 4.39344826, 4.2789993
, 4.16109238, 4.04055738, 3.9180947, 3.79415321, 3.66881585, 3.54173806
, 3.41218234, 3.27916097, 3.14165186, 2.99881954, 2.85017775, 2.69566477
, 2.53564134, 2.37084392, 2.20232612, 2.03140664, 1.85962351, 1.68868296
, 1.52039049, 1.35656066, 1.19891396, 1.04897706, 0.9080029, 0.77692186
, 0.6563266, 0.54648652, 0.44738357, 0.35876062, 0.28017429, 0.21104633
, 0.15071007, 0.09844972, 0.05353208, 0.01523104])
dark_overlap = np.array([0.01520569, 0.05321597, 0.09736799, 0.14814039, 0.20592953, 0.27100505
, 0.34346111, 0.42316998, 0.50974858, 0.60255238, 0.70071118, 0.80321455
, 0.90903966, 1.0172948, 1.12733873, 1.23883956, 1.35175871, 1.46627257
, 1.5826626, 1.7012062, 1.82209034, 1.9453565, 2.07087575, 2.19834799
, 2.32731808, 2.45720265, 2.58732241, 2.71693602, 2.84527271, 2.97156138
, 3.09505515, 3.21505053, 3.33090124, 3.4420271, 3.54791844, 3.64813699
, 3.74231396, 3.83014606, 3.91139026, 3.98585774, 4.0534076, 4.11394066
, 4.16739361, 4.21373368, 4.252954, 4.28506977, 4.31011515, 4.32814106
, 4.33921388, 4.34341505, 4.3408416, 4.33160775, 4.3158475, 4.29371838
, 4.26540637, 4.23113195, 4.19115729, 4.14579423, 4.09541269, 4.0404482
, 3.9814069, 3.91886457, 3.85345459, 3.78583684, 3.71663674, 3.64634164
, 3.57514423, 3.50273498, 3.42807462, 3.34922316, 3.26334651, 3.16702015
, 3.05685797, 2.9303251, 2.78645281, 2.6261798, 2.45221159, 2.26850066
, 2.07957183, 1.88990555, 1.70349795, 1.52361912, 1.35273365, 1.1925309
, 1.04401904, 0.9076483, 0.78343967, 0.67110326, 0.57013763, 0.47990727
, 0.39969956, 0.32876498, 0.26634479, 0.21169006, 0.1640748, 0.12280499
, 0.08722492, 0.05672121, 0.03072529, 0.00871431])
bright_energies = np.array([1.52943200e-02, 5.43190654e-02, 1.01134421e-01, 1.57067906e-01
, 2.23669254e-01, 3.02739489e-01, 3.96354545e-01, 5.06875288e-01
, 6.36932184e-01, 7.89370297e-01, 9.67141541e-01, 1.17313931e+00
, 1.40998693e+00, 1.67981118e+00, 1.98404530e+00, 2.32330119e+00
, 2.69732882e+00, 3.10505253e+00, 3.54465609e+00, 4.01368698e+00
, 4.50916061e+00, 5.02765769e+00, 5.56541658e+00, 6.11842434e+00
, 6.68250906e+00, 7.25343313e+00, 7.82698450e+00, 8.39906179e+00
, 8.96574934e+00, 9.52337862e+00, 1.00685744e+01, 1.05982851e+01
, 1.11097975e+01, 1.16007387e+01, 1.20690661e+01, 1.25130493e+01
, 1.29312454e+01, 1.33224704e+01, 1.36857690e+01, 1.40203835e+01
, 1.43257238e+01, 1.46013391e+01, 1.48468919e+01, 1.50621344e+01
, 1.52468877e+01, 1.54010241e+01, 1.55244515e+01, 1.56171012e+01
, 1.56789174e+01, 1.57098497e+01, 1.57098475e+01, 1.56788560e+01
, 1.56168157e+01, 1.55236617e+01, 1.53993272e+01, 1.52437471e+01
, 1.50568645e+01, 1.48386391e+01, 1.45890576e+01, 1.43081466e+01
, 1.39959878e+01, 1.36527382e+01, 1.32786533e+01, 1.28741185e+01
, 1.24396912e+01, 1.19761572e+01, 1.14846094e+01, 1.09665528e+01
, 1.04240344e+01, 9.85978605e+00, 9.27734572e+00, 8.68111012e+00
, 8.07627057e+00, 7.46861828e+00, 6.86425261e+00, 6.26926102e+00
, 5.68943687e+00, 5.13006944e+00, 4.59580351e+00, 4.09054479e+00
, 3.61738805e+00, 3.17855893e+00, 2.77537711e+00, 2.40825792e+00
, 2.07676657e+00, 1.77972750e+00, 1.51537624e+00, 1.28153177e+00
, 1.07576499e+00, 8.95545329e-01, 7.38355348e-01, 6.01772051e-01
, 4.83518540e-01, 3.81492276e-01, 2.93776403e-01, 2.18639746e-01
, 1.54529749e-01, 1.00061425e-01, 5.40043489e-02, 1.52690078e-02])
bright_overlap = np.array([1.52942877e-02, 5.43176398e-02, 1.01125353e-01, 1.57034485e-01
, 2.23574497e-01, 3.02509456e-01, 3.95850997e-01, 5.05852606e-01
, 6.34972367e-01, 7.85789812e-01, 9.60866035e-01, 1.16254807e+00
, 1.39273868e+00, 1.65267445e+00, 1.94276499e+00, 2.26253288e+00
, 2.61066163e+00, 2.98512337e+00, 3.38334110e+00, 3.80234488e+00
, 4.23890017e+00, 4.68960484e+00, 5.15096234e+00, 5.61944109e+00
, 6.09152754e+00, 6.56377688e+00, 7.03286169e+00, 7.49561713e+00
, 7.94908042e+00, 8.39052249e+00, 8.81747047e+00, 9.22772039e+00
, 9.61934051e+00, 9.99066615e+00, 1.03402874e+01, 1.06670317e+01
, 1.09699419e+01, 1.12482532e+01, 1.15013683e+01, 1.17288327e+01
, 1.19303116e+01, 1.21055675e+01, 1.22544404e+01, 1.23768292e+01
, 1.24726764e+01, 1.25419537e+01, 1.25846506e+01, 1.26007642e+01
, 1.25902918e+01, 1.25532242e+01, 1.24895409e+01, 1.23992079e+01
, 1.22821753e+01, 1.21383783e+01, 1.19677388e+01, 1.17701697e+01
, 1.15455813e+01, 1.12938917e+01, 1.10150408e+01, 1.07090112e+01
, 1.03758577e+01, 1.00157500e+01, 9.62903336e+00, 9.21631574e+00
, 8.77858895e+00, 8.31739199e+00, 7.83501733e+00, 7.33474482e+00
, 6.82105758e+00, 6.29975557e+00, 5.77785522e+00, 5.26318596e+00
, 4.76369272e+00, 4.28659677e+00, 3.83766194e+00, 3.42077744e+00
, 3.03792206e+00, 2.68942273e+00, 2.37435180e+00, 2.09092962e+00
, 1.83686326e+00, 1.60960795e+00, 1.40656375e+00, 1.22522141e+00
, 1.06326352e+00, 9.18622110e-01, 7.89495635e-01, 6.74333390e-01
, 5.71799534e-01, 4.80729560e-01, 4.00089054e-01, 3.28940403e-01
, 2.66419166e-01, 2.11719307e-01, 1.64085211e-01, 1.22808221e-01
, 8.72257294e-02, 5.67213585e-02, 3.07253063e-02, 8.71431268e-03])

colors = ['midnightblue','steelblue',  'firebrick']
fill_colors = [ 'royalblue','lightsteelblue', 'lightcoral']
labels = ['incoherent scattering', 'coherent scattering, darker ground state',
          'coherent scattering, brighter ground state']
titles = ['STIRAP', 'Dark protocol', 'Bright protocol']
fig, ax = plt.subplots(1, 3, sharey=True)
for l in range(3):
    times = np.linspace(.001, .999, 100)
    nh_energies = []
    overlaps = []
    if l == 0:
        nh_energies = stirap_energies
        overlaps = stirap_overlap
    elif l == 1:
        nh_energies = dark_energies
        overlaps = dark_overlap
    elif l == 2:
        nh_energies = bright_energies
        overlaps = bright_overlap

    ax[l].plot(times, nh_energies / graph.n, label='Jump rate', color=colors[l])
    ax[l].plot(times, overlaps / graph.n, linestyle=':', color=colors[l], label='Ground jump rate')
    ax[l].fill_between(times, overlaps / graph.n, nh_energies / graph.n, color=fill_colors[l], label='Leakage rate')
    ax[l].legend(shadow=False, fancybox=True, loc='upper right', title=titles[l])
    l += 1
plt.ylim(0, 1.1)
ax[0].set_ylabel('Dimensionless rate per atom')
ax[1].set_xlabel(r'Time $(t/T)$')
fig.text(.59, .5, r'$\rho^\mu = \begin{bmatrix} \rho^{\mu}_{rr} & \pm\rho_{gr}^\mu \\ \pm \rho_{gr}^\mu & \rho_{gg}^\mu \end{bmatrix}$', bbox=dict(boxstyle="darrow,pad=0.3", fc='white',lw=1, zorder=100))
plt.tight_layout()
plt.show()


# n=5 line graph
gammas = np.array([0.01, 0.05623413, 0.31622777, 1.77827941, 10.,  56.23413252,  316.22776602, 1778.27941004])
fidelities_STIRAP = np.array([0.9991313378366556, 0.995247654560657, 0.9743869922607066, 0.8827863141817929,
                              0.71815611706904, .7549674470303099, .8942636540024815, 0.8994272925757008])
ars_STIRAP = np.array([0.9996903465274074, 0.998311001651014, 0.9908914648603937, 0.9580729307945668,
                       0.8978191731607447, 0.9113617525862375, 0.9626167809297609, 0.9662709073431254])
fidelities_bad_detuning = np.array([0.9921057571833352, 0.9565109321582923, 0.779008184817356, 0.247278751972299,
                                    0.000645421039016858, 4.834882102819639e-06, 1.7266325798581873e-07, 1.7063722811791265e-08])
fidelities_good_detuning = np.array([0.998226354744348, 0.9901935669423619, 0.9470261197045199, 0.7550417416137795,
                                     0.3123717481122727, 0.0117412744148789, 9.029742910929614e-06, 7.917178993983679e-08])
ars_bad_detuning = np.array([0.9971212108933737, 0.9840859457765132, 0.9172679870946217, 0.6667884863580829,
                             0.16402754446008422, 0.04155423678019833, 0.0143843968824669, 0.006324755822648832])
ars_good_detuning = np.array([0.999358669316008, 0.9964562926725471, 0.9807784038969602, 0.9089192824169905,
                              0.709188506523729, 0.33192472887552404, 0.051621987560909244, 0.01120018996043992])
colors = ['midnightblue','steelblue',  'firebrick']

fig, ax=plt.subplots(2, 2, sharey=True)
ax[0][0].loglog(gammas[:len(fidelities_STIRAP)], 1-fidelities_STIRAP, label='STIRAP', color='midnightblue', linestyle=':')
ax[0][1].loglog(gammas[:len(ars_STIRAP)], 1-ars_STIRAP, label='STIRAP', color='midnightblue')

ax[0][0].loglog(gammas[:len(fidelities_good_detuning)], 1-fidelities_good_detuning, label='Dark protocol', linestyle=':', color='steelblue')
ax[0][1].loglog(gammas[:len(ars_good_detuning)], 1-ars_good_detuning, label='Dark protocol', color='steelblue')
ax[0][1].loglog(gammas[:len(ars_bad_detuning)], 1-ars_bad_detuning, label='Bright protocol', color='firebrick')
ax[0][0].loglog(gammas[:len(fidelities_bad_detuning)], 1-fidelities_bad_detuning, label='Bright protocol', linestyle=':', color='firebrick')



ax[0][0].set_ylabel('1-Fidelity')
ax[0][1].set_ylabel('1-Approximation Ratio')
ax[0][0].set_xlabel(r'$\gamma_{\rm{eff}}T$')
ax[0][1].set_xlabel(r'$\gamma_{\rm{eff}}T$')
ax[1][0].set_ylabel(r'Integrated jump rate from $|j\rangle$')
ax[1][1].set_ylabel(r'Integrated jump rate from $|j\rangle$')
ax[1][0].set_xlabel(r'Final approximation ratio of $|j\rangle$')
ax[1][1].set_xlabel(r'Final approximation ratio of $|j\rangle$')
ax[0][0].legend()
ax[0][1].legend()
ax[0][0].loglog()
ax[1][0].loglog()
ax[1][1].loglog()

plt.show()


plt.plot(gammas, fidelities_STIRAP, label='STIRAP fidelity', color='darkblue', linestyle=':')
plt.plot(gammas, fidelities_bad_detuning, label='Bright fidelity', linestyle=':', color='purple')
plt.plot(gammas, fidelities_good_detuning, label='Dark fidelity', linestyle=':', color='red')
plt.plot(gammas, ars_good_detuning, label='Dark AR', color='red')
plt.plot(gammas, ars_bad_detuning, label='Bright AR', color='purple')

plt.plot(gammas, ars_STIRAP, label='STIRAP AR', color='darkblue')
plt.legend()
plt.show()